plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'io.github.devbd1'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.dmulloy2.net/nexus/repository/public/"
    }
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    maven {
        url = 'https://repo.extendedclip.com/releases/'
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.7-R0.1-SNAPSHOT")
    compileOnly "com.comphenix.protocol:ProtocolLib:5.1.0"
    implementation "commons-io:commons-io:2.15.1"
    implementation("de.tr7zw:item-nbt-api:2.15.1")
    compileOnly files('libs/RealisticSeasons-11.8.1.jar')
    compileOnly 'me.clip:placeholderapi:2.11.6'
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': 'io.github.devbd1.cublexcore.Main' // optional, not needed for plugins
        )
    }

    from {
        configurations.runtimeClasspath.filter { it.name.endsWith("jar") }.collect { zipTree(it) }
    }

    archiveClassifier.set("") // creates Cublex-1.1.0.jar instead of Cublex-1.1.0-all.jar
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand(version: project.version)
        expand props
    }
}

tasks.register("printJdk") {
    doLast {
        println "Running with: " + System.getProperty("java.version")
    }
}

// Version bump logic
def versionFile = file("version.txt")
if (versionFile.exists()) {
    version = versionFile.text.trim()
} else {
    versionFile.text = version
    println "version.txt not found, created with version: $version"
}

tasks.register("bumpVersion") {
    doLast {
        if (!versionFile.exists()) {
            throw new GradleException("version.txt not found.")
        }

        def currentVersion = versionFile.text.trim()
        def releaseType = project.hasProperty("releaseType") ? project.releaseType : "patch"

        def (major, minor, patch) = currentVersion.tokenize('.').collect { it.toInteger() }

        switch (releaseType) {
            case "major":
                major++; minor = 0; patch = 0; break
            case "minor":
                minor++; patch = 0; break
            case "patch":
                patch++; break
            default:
                throw new GradleException("Unknown releaseType: $releaseType. Use major, minor or patch.")
        }

        def newVersion = "${major}.${minor}.${patch}"
        versionFile.text = newVersion
        println "üîÅ Version bumped: $currentVersion ‚Üí $newVersion"
    }
}

tasks.register("bumpAndBuild") {
    dependsOn "bumpVersion", "build"
}